import random
import string


def generate_password(length, use_uppercase, use_lowercase, use_digits, use_symbols, exclude_similar):
    if length < 1:
        raise ValueError("Password length must be at least 1")

    similar_chars = 'il1Lo0O'

    upper = string.ascii_uppercase
    lower = string.ascii_lowercase
    digits = string.digits
    symbols = string.punctuation

    if exclude_similar:
        upper = ''.join([c for c in upper if c not in similar_chars])
        lower = ''.join([c for c in lower if c not in similar_chars])
        digits = ''.join([c for c in digits if c not in similar_chars])

    charset = ""
    if use_uppercase:
        charset += upper
    if use_lowercase:
        charset += lower
    if use_digits:
        charset += digits
    if use_symbols:
        charset += symbols

    if not charset:
        raise ValueError("At least one character set must be selected")

    password = []
    if use_uppercase:
        password.append(random.choice(upper))
    if use_lowercase:
        password.append(random.choice(lower))
    if use_digits:
        password.append(random.choice(digits))
    if use_symbols:
        password.append(random.choice(symbols))

    password.extend(random.choice(charset) for _ in range(length - len(password)))
    random.shuffle(password)

    return ''.join(password)


def get_user_input():
    try:
        length = int(input("Enter the desired password length: "))
        if length < 1:
            raise ValueError("Password length must be at least 1")
    except ValueError as e:
        print(e)
        return None, None, None, None, None, None

    print("Select password strength:")
    print("1. Weak")
    print("2. Medium")
    print("3. Strong")

    strength = input("Enter choice (1/2/3): ").strip()
    if strength not in ['1', '2', '3']:
        print("Invalid choice")
        return None, None, None, None, None, None

    if strength == '1':
        use_uppercase = False
        use_lowercase = True
        use_digits = False
        use_symbols = False
    elif strength == '2':
        use_uppercase = True
        use_lowercase = True
        use_digits = True
        use_symbols = False
    else:
        use_uppercase = True
        use_lowercase = True
        use_digits = True
        use_symbols = True

    exclude_similar = input(
        "Exclude similar characters (i.e., 'i', 'l', '1', 'L', 'o', '0', 'O')? (yes/no): ").strip().lower() == 'yes'

    return length, use_uppercase, use_lowercase, use_digits, use_symbols, exclude_similar


def main():
    print("Welcome to the Enhanced Password Generator!")
    while True:
        length, use_uppercase, use_lowercase, use_digits, use_symbols, exclude_similar = get_user_input()
        if length is None:
            return

        try:
            password = generate_password(length, use_uppercase, use_lowercase, use_digits, use_symbols, exclude_similar)
            print(f"Generated Password: {password}")
            regenerate = input("Are you satisfied with the generated password? (yes/no): ").strip().lower()
            if regenerate == 'yes':
                break
        except ValueError as e:
            print(e)


if __name__ == "__main__":
    main()
